{
    "-MiBsBKGWFEU-yluJkL-": {
        "vocab": "List",
        "langTechId": "-MiBt86VzkC-EGmJnxjm",
        "firebaseKey": "-MiBsBKGWFEU-yluJkL-",
        "definition": "An ordered collection of items that can hold a variety of object types, including other lists. Lists are mutable, meaning that their content can be changed after they are created. Lists are defined by placing a comma-separated sequence of elements within square brackets [].",
        "image": "/Images/pythonImage.jpg",
        "categoryType": "Python",
        "wordOfTheMonth": true,
        "timeSubmitted": "2024-04-08T12:00:00Z"
    },
    "-MiBsknNSQ6aBG1-2lQS": {
        "vocab": "Promise",
        "langTechId": "-MiBsfuTafbEQ7eAULxV",
        "firebaseKey": "-MiBsknNSQ6aBG1-2lQS",
        "definition": "An object representing the eventual completion or failure of an asynchronous operation. It is a placeholder for a value that is not necessarily known when the promise is created. Promises allow you to write asynchronous code in a more synchronous fashion, making it easier to handle asynchronous operations such as API calls, file reading, or timers.",
        "image": "/Images/javascriptImage.jpg",
        "wordOfTheMonth": true,
        "categoryType": "Javascript",
        "timeSubmitted": "2024-05-02T15:30:00Z"
    },
    "-MiBuCve4-r_H-RLUOh2": {
        "vocab": "Interface",
        "langTechId": "-MiBtwf1BwN9pGavQeR3",
        "firebaseKey": "-MiBuCve4-r_H-RLUOh2",
        "definition": "An interface is a reference type, similar to a class, that can contain only constants, method signatures, default methods, static methods, and nested types. Interfaces cannot contain instance fields or constructors. They are used to specify what a class must do but not how it does it. An interface is implemented by a class, thereby providing the class with a blueprint for behavior that it must adhere to.",
        "image": "/Images/javaImage.jpg",
        "wordOfTheMonth": false,
        "categoryType": "Java",
        "timeSubmitted": "2024-03-09T08:45:00Z"
    },
    "-MiBuU13EaKmGOMjJF-X": {
        "vocab": "Pointer",
        "langTechId": "-MiBuOfHv9NCKB_cneij",
        "firebaseKey": "-MiBuU13EaKmGOMjJF-X",
        "definition": "a variable that stores the memory address of another variable. Pointers are used for various purposes, including dynamic memory allocation, arrays, and function arguments, enabling direct memory access and manipulation.",
        "image": "/Images/c++Image.jpg",
        "wordOfTheMonth": false,
        "categoryType": "C++",
        "timeSubmitted": "2024-02-23T22:10:00Z"
    }
}